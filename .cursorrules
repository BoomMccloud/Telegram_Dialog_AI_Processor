# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `.venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file .cursorrules`. The `--file` option with `.cursorrules` is mandatory to ensure the planner has full context of the current state and previous decisions. You can include additional files in the analysis by adding more `--file` options: `.venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file .cursorrules --file {path/to/additional/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2) Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
.venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
.venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
.venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
.venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
.venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a uv python venv in ./.venv. Always use it when running python scripts. It's a uv venv, so use `uv pip install` to install packages. And you need to activate it first. When you see errors like `no such file or directory: .venv/bin/uv`, that means you didn't activate the venv.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use `gpt-4o` as the model name for OpenAI. It is the latest GPT model and has vision capabilities as well. `o1` is the most advanced and expensive model from OpenAI. Use it when you need to do reasoning, planning, or get blocked.
- Use `claude-3-5-sonnet-20241022` as the model name for Claude. It is the latest Claude model and has vision capabilities as well.
- When running Python scripts that import from other local modules, use `PYTHONPATH=.` to ensure Python can find the modules. For example: `PYTHONPATH=. python tools/plan_exec_llm.py` instead of just `python tools/plan_exec_llm.py`. This is especially important when using relative imports.
- When using Docker Compose in a project with virtual environments, make sure to activate the virtual environment before running Docker Compose commands to ensure that environment variables from `.env` files are properly loaded and passed to the containers. For example, use `source .venv/bin/activate && docker-compose up -d` instead of just `docker-compose up -d`.
- When mocking an API that uses in-memory session storage (like `client_sessions` dictionary), ensure all dictionaries that store session information are properly synchronized. When creating mock sessions, always populate all required dictionaries with consistent data. For authentication-dependent endpoints, add double-checks to ensure sessions exist in all necessary dictionaries before attempting operations.
- For hybrid development environments, run just the database in Docker while keeping the backend and frontend running locally. This approach gives you the benefits of containerized persistence while maintaining fast development cycles. Use `docker-compose up -d postgres` to start only the database service, then run the backend with environment variables set to connect to the containerized database.
- When switching between development and production modes in a web application, ensure data formats remain consistent. Mock data APIs often have slightly different response formats than real APIs. Always check the response structure in both environments and adjust the backend to maintain format consistency.

# Multi-Agent Scratchpad

## Background and Motivation

The Telegram Dialog AI Processor is a web application that enables users to process Telegram messages with AI and manage responses. The system includes:

1. **Backend Features**:
   - Telegram integration via Telethon API for message retrieval
   - QR code-based authentication for secure login
   - Dialog selection for processing specific conversations
   - AI-powered message analysis and response generation using Claude
   - Database storage for messages, processing results, and user preferences

2. **Frontend Interface**:
   - Modern Next.js 14 web UI with TypeScript and Tailwind CSS
   - Intuitive dialog selection and filtering
   - Processing status indicators
   - Response review interface for approving, rejecting, or modifying AI responses

The system is designed to help users efficiently manage Telegram conversations by using AI to generate context-aware responses, which users can then review before sending. The MVP will use Claude as the primary LLM, with plans to support multiple models in the future.

## Key Challenges and Analysis

Current Issue: Session management logic is scattered across multiple places, making it hard to maintain and debug. We need to refactor the session management system to follow a cleaner architecture.

1. **Current Problems**:
   - Session logic is duplicated across frontend, backend, and middleware
   - File-based session storage adds unnecessary complexity
   - Multiple expiration checks causing inconsistent behavior
   - Unclear separation of concerns between components

2. **Proposed Architecture**:
   - Frontend: Handles session state and periodic checks
   - Middleware: Centralizes session validation
   - Backend: Focuses only on business logic
   - JWT-based sessions for stateless operation

3. **Security Considerations**:
   - JWT tokens with proper expiration
   - Secure token storage in frontend
   - Clear session invalidation process
   - Protection against token tampering

## High-level Task Breakdown

1. **Backend Middleware Implementation**:
   - Create new `SessionMiddleware` class
   - Implement JWT-based session management
   - Add session validation logic
   - Remove file-based session storage

2. **Frontend Session Management**:
   - Update `SessionContext` with new state management
   - Implement periodic session checks
   - Add proper error handling
   - Update QR code login flow

3. **Backend Route Cleanup**:
   - Simplify auth routes to remove session management
   - Update QR login endpoint
   - Remove unnecessary session endpoints
   - Add proper error responses

4. **Testing and Validation**:
   - Test session creation flow
   - Verify expiration handling
   - Check error scenarios
   - Validate security measures

## Current Status / Progress Tracking

Status: Session Management Refactoring In Progress

Next Steps:
1. **Create New Session Middleware**:
   - Create `backend/app/middleware/session.py`
   - Implement JWT-based session management
   - Add session validation middleware
   - Update FastAPI app to use new middleware

2. **Update Frontend Session Context**:
   - Modify `frontend/src/app/SessionContext.tsx`
   - Implement new session state management
   - Add periodic session checks
   - Update error handling

3. **Clean Up Backend Routes**:
   - Update `backend/app/api/auth.py`
   - Remove file-based session code
   - Simplify QR login endpoint
   - Update session status endpoint

4. **Remove Legacy Code**:
   - Remove file-based session storage
   - Clean up unused session functions
   - Update dependencies

## Executor's Feedback or Assistance Requests

Ready to begin implementation of the new session management system. Will start with the backend middleware as it's the foundation for the new architecture.

Next action: Create the new `SessionMiddleware` class in `backend/app/middleware/session.py`.

## Implementation Plan

1. **Phase 1: Backend Middleware (Current Focus)**

   a) **Database Schema**
   ```sql
   -- Add to backend migrations
   CREATE TABLE IF NOT EXISTS sessions (
       id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
       user_id INTEGER REFERENCES users(id),
       status VARCHAR(20) NOT NULL CHECK (status IN ('pending', 'authenticated', 'error', 'expired')),
       token VARCHAR(500) NOT NULL UNIQUE,
       created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
       expires_at TIMESTAMPTZ NOT NULL,
       metadata JSONB DEFAULT '{}'::jsonb,
       
       -- Indexes for common queries
       INDEX idx_sessions_token (token),
       INDEX idx_sessions_user_id (user_id),
       INDEX idx_sessions_status (status)
   );
   ```

   b) **Session Middleware Implementation**
   ```python
   # backend/app/middleware/session.py
   from fastapi import Request, HTTPException
   from app.db.database import get_raw_connection
   
   class SessionMiddleware:
       def __init__(self, conn=Depends(get_raw_connection)):
           self.conn = conn
           self.jwt_secret = os.getenv("JWT_SECRET")
           
       async def _store_session(self, token: str, user_id: Optional[int] = None) -> dict:
           """Store session in database"""
           async with self.conn.transaction():
               session = await self.conn.fetchrow("""
                   INSERT INTO sessions (token, user_id, status, expires_at)
                   VALUES ($1, $2, $3, NOW() + interval '7 days')
                   RETURNING *
               """, token, user_id, 'pending')
               return dict(session)
               
       async def verify_session(self, token: str) -> dict:
           """Verify and return session data"""
           session = await self.conn.fetchrow("""
               SELECT * FROM sessions 
               WHERE token = $1 AND expires_at > NOW()
           """, token)
           
           if not session:
               raise HTTPException(401, "Invalid or expired session")
               
           return dict(session)
           
       async def update_session(self, token: str, user_id: int) -> dict:
           """Update session after successful authentication"""
           session = await self.conn.fetchrow("""
               UPDATE sessions 
               SET 
                   user_id = $1,
                   status = 'authenticated',
                   expires_at = NOW() + interval '7 days'
               WHERE token = $2
               RETURNING *
           """, user_id, token)
           
           if not session:
               raise HTTPException(401, "Session not found")
               
           return dict(session)
   ```

   c) **Session Cleanup Job**
   ```python
   # backend/app/services/cleanup.py
   async def cleanup_expired_sessions():
       """Clean up expired sessions periodically"""
       conn = await get_raw_connection()
       try:
           await conn.execute("""
               DELETE FROM sessions 
               WHERE expires_at < NOW()
           """)
       finally:
           await conn.close()
   ```

2. **Phase 2: Frontend Session Management**

   a) **Session Types**
   ```typescript
   // frontend/src/types/auth.ts
   export interface Session {
     id: string;
     userId?: number;
     status: 'pending' | 'authenticated' | 'error' | 'expired';
     token: string;
     expiresAt: string;
   }
   
   export interface AuthError {
     code: string;
     message: string;
   }
   ```

   b) **Session Hook**
   ```typescript
   // frontend/src/app/hooks/useSession.ts
   export function useSession() {
     const [session, setSession] = useState<Session | null>(null);
     const router = useRouter();
     
     const checkSession = useCallback(async (token: string) => {
       try {
         const response = await fetch(`${API_URL}/auth/session/verify`, {
           headers: { 'Authorization': `Bearer ${token}` }
         });
         
         if (!response.ok) {
           throw new Error('Session invalid');
         }
         
         const data = await response.json();
         setSession(data);
         
         return data;
       } catch (err) {
         localStorage.removeItem('session_token');
         setSession(null);
         throw err;
       }
     }, []);
     
     // ... rest of the implementation
   }
   ```

3. **Phase 3: Migration Steps**

   a) Create and run database migration
   b) Implement new SessionMiddleware
   c) Update frontend to use new session types
   d) Add session cleanup job to backend startup
   e) Test all authentication flows
   f) Remove old file-based session code
   g) Update documentation

4. **Phase 4: Testing**

   a) **Session Flow Tests**
   ```python
   # backend/tests/test_auth.py
   async def test_session_lifecycle():
       """Test complete session lifecycle"""
       # Create session
       response = await client.post("/api/auth/qr")
       assert response.status_code == 200
       session_data = response.json()
       
       # Verify pending session
       response = await client.get(
           "/api/auth/session/verify",
           headers={"Authorization": f"Bearer {session_data['token']}"}
       )
       assert response.status_code == 200
       assert response.json()["status"] == "pending"
       
       # Test complete auth flow
       # ... rest of the test implementation
   ```

## Next Steps and Action Items

1. **Immediate Actions**:
   - Create new `session.py` middleware file
   - Implement JWT token handling
   - Add environment variables for JWT secret
   - Update FastAPI app configuration

2. **Following Steps**:
   - Update frontend session context
   - Modify QR login flow
   - Remove file-based session code
   - Add comprehensive testing

3. **Final Phase**:
   - Documentation updates
   - Security review
   - Performance testing
   - Deployment preparation